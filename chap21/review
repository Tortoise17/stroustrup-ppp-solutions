1. What are examples of useful STL algorithms?
	find(_if), copy(_if), accumulate, sort

2. What does find() do? Give at least five examples.
	Return iterator to value in container equal to a given value.
	Eg:
		Find name of student in a list, to edit other properties
		Check if value exists in a container
		Avoid inserting duplicate values in a container by checking
		Find first occurence of a value
		Find a value in a specified range

3. What does count_if() do?
	Return number of values in a container satisfying a predicate

4. What does sort(b,e) use as its sorting criterion?
	std::less<>

5. How does an STL algorithm take a container as an input argument?
	By passing iterators to its beginning, and optionally its end

6. How does an STL algorithm take a container as an output argument?
	By passing iterators to its beginning, and optionally its end

7. How does an STL algorithm usually indicate “not found” or “failure”?
	Returns the end iterator passed to the algorithm

8. What is a function object?
	A class object which represents a function and has a state

9. In which ways does a function object differ from a function?
	It has a state. Hence it can be constructed with a value and set to a different state
	later

10. What is a predicate?
	A function that returns a boolean value

11. What does accumulate() do?
	Returns sum of values in a range. Optionally we can specify the operation to use.

12. What does inner_product() do?
	Calculates scalar product of two containers a and b.
	i.e inner_product(a.begin(), a.end(), b.begin()) == Σ(a_i * b_i) {a.begin() <= i < a.end()}

13. What is an associative container? Give at least three examples.
	A container having a key as identifier and a value type.
	Eg: map, unordered_map, multimap

14. Is list an associative container? Why not?
	No as it only stores values not k,v pairs

15. What is the basic ordering property of binary tree?
	node.left->first < node.first && node.right->first > node.first

16. What (roughly) does it mean for a tree to be balanced?
	Number of nodes in all subtrees at an equal distance from a given subtree are equal

17. How much space per element does a map take up?
	node* left
	node* right
	node* parent
	key_type key
	val_type val

18. How much space per element does a vector take up?
	val_type val

19. Why would anyone use an unordered_map when an (ordered) map
is available?
	When we want to frequently lookup in a large map
	When order of elements does not matter

20. How does a set differ from a map?
	Set only stores a key not a value
	Keys in a set are immutable

21. How does a multimap differ from a map?
	Keys in a multimap are not unique unlike a map

22. Why use a copy() algorithm when we could “just write a simple
loop”?
	To avoid code repetition
	Unnecessary errors when we have a tested function
	Make code the self documenting

23. What is a binary search?
	It is a method of searching a value in a sorted container.
