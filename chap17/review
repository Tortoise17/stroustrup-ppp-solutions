Notes:

Using `delete` without `new`?

You must not delete an object that was not allocated with new. If the object was allocated on the stack, your compiler has 
already generated a call to its destructor at the end of its scope. This means you will call the destructor twice, with 
potentially very bad effects.

Besides calling the destructor twice, you will also attempt to deallocate a memory block that was never allocated. The new 
operator presumably puts the objects on the heap; delete expects to find the object in the same region the new operator 
puts them. However, your object that was not allocated with new lives on the stack. This will very probably crash your 
program (if it does not already crash after calling the destructor a second time).


You'll also get in deep trouble if your Object on the heap lives longer than your Object on the stack: you'll get a 
dangling reference to somewhere on the stack, and you'll get incorrect results/crash the next time you access it.

The general rule I see is that stuff that live on the stack can reference stuff that lives on the heap, but stuff on the 
heap should not reference stuff on the stack because of the very high chances that they'll outlive stack objects. And 
pointers to both should not be mixed together.

Source: https://stackoverflow.com/a/4355485/14988173

Review:

1. Why do we need data structures with varying numbers of elements?
    Allows to store a set of data together rather than individually
    Varying size allows us to manipulate the data .i.e insert and delete elements

2. What four kinds of storage do we have for a typical program?
    code
    static data
    free store 
    stack

3. What is the free store? What other name is commonly used for it?
What operators support it?
    Memory available for program other than code, static data and stack
    Heap storage
    new and delete

4. What is a dereference operator and why do we need one?
    operator to get / set data of pointee

5. What is an address? How are memory addresses manipulated in C++?
    Number that indicates a location in memory
    Manipulated using pointers

6. What information about a pointed-to object does a pointer have? What
useful information does it lack?
    The object's address
    The data of the object
    int* p = new int[5]; // p points to p[0], it does not know size of array 

7. What can a pointer point to?
    Any location in memory, nullptr

8. What is a leak?
    Not de-allocating memory which is not of use anymore

9. What is a resource?
    something that is acquired and must later be released after it is used
    eg: file, a lock, objects, memory

10. How can we initialize a pointer?
    <type>* ptr = new <type>;
    <type>* ptr = some_other_ptr;
    <type>* ptr = &var;

11. What is a null pointer? When do we need to use one?
    Value to initialize a pointer when no other pointer is available, it points to nothing
    we use it when a pointer points to some object and sometimes it does not

12. When do we need a pointer (instead of a reference or a named
object)?
    A pointer can be used when it may point to a different object at some time
    or we are using heap allocation

13. What is a destructor? When do we want one?
    A function called to clean up the object when it is no longer of use / goes out of scope
    It should be used to free resources automatically
    When we are allocating memory but must also free it when it is no longer being used

14. When do we want a virtual destructor?
    "If expression evaluates to a pointer to the base class subobject of the object that was allocated with new,
    the destructor of the base class must be virtual, otherwise the behavior is undefined."
    Important when derived class is instantiated as a base (polymorphism)
    
    """
    Non virtual: A() B() ~A()

    Virtual: A_v()   B_v()   ~B_v()  ~A_v()
    """
    see v_destructor.cpp

15. How are destructors for members called?
    - If there is no destructor for a class, an implicit destructor destroys class members
    - Resources such as memory allocated by new is not freed by implicit destructor
    - Base class destructor must be virtual so that derived class destructor is called. The derived class destructor
    implicitly calls the virtual base class destructor after it is complete

16. What is a cast? When do we need to use one?
    operation to convert between different data-types
    Note: pointers should not be implicitly converted as pointer arithmetic requires data-type size for [] operator

    Eg: setting certain part of memory as a "Register"

    
    Register* in = reinterpret_cast<Register*>(0xff);
    void f(const Buffer* p)
    {
        Buffer* b = const_cast<Buffer*>(p);
        // . . .
    }

    static_cast, const_cast, reinterpret_cast etc.

17. How do we access a member of a class through a pointer?
    ptr->member or (*ptr).member

18. What is a doubly-linked list?
    Each item knows its predecessor and successor

19. What is `this` and when do we need to use it?
    Identifier which points to object for which the member function was called