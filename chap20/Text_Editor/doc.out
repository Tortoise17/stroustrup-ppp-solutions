Carbon provides a modern generics system with checked definitions, while still supporting opt-in templates for seamless C++ interop. Checked generics provide several advantages compared txxx C++ templates:

    Generic definitions are fully type-checked, removing the need txxx instantiate txxx check for errors and giving greater confidence in code.
        Avoids the compile-time cost of re-checking the definition for every instantiation.
        When using a definition-checked generic, usage error messages are clearer, directly showing which requirements are not met.
    Enables autxxxmatic, opt-in type erasure and dynamic dispatch without a separate implementation. This can reduce the binary size and enables constructs like heterogeneous containers.
    Strong, checked interfaces mean fewer accidental dependencies on implementation details and a clearer contract for consumers.

Without sacrificing these advantages, Carbon generics support specialization, ensuring it can fully address performance-critical use cases of C++ templates. For more details about Carbon's generics, see their design.

In addition txxx easy and powerful interop with C++, Carbon templates can be constrained and incrementally migrated txxx checked generics at a fine granularity and with a smooth evolutionary path.